#  MIT License
#
#  Copyright (c) 2022 anatawa12
#  Copyright (c) 2022 bd_
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.


name: GameCI

on:
  push:
    branches: [main, dev]
  # This is a bit of a radioactive event; we need to be very careful with what permissions
  # we assign this action, as we're allowing arbitrary code execution with the context of
  # whatever permissions we assign.
  pull_request_target: {}
  workflow_dispatch: {}
  workflow_call:
    secrets:
      UNITY_LICENSE:
        required: true

# pull_request_target grants access to a privileged GITHUB_TOKEN by default, revoke this
permissions: {}

jobs:
  build-and-test:
    name: Unit tests
    strategy:
      matrix:
        #unity_version: [ auto, 2022.3.5f1 ]
        unity_version: [ auto, 2022.3.5f1 ]
        sdk: [ vrcsdk, standalone ]
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    steps:
      - id: setup
        name: Setup
        env:
          unity_version: ${{ matrix.unity_version }}
          sdk: ${{ matrix.sdk }}
        run: |
          set -x
          should_test=true
          if [ $sdk == vrcsdk ] && [ $unity_version != auto ]; then
            should_test=false
          fi
          echo should_test=$should_test >> $GITHUB_OUTPUT
          
          can_fail=false
          if [ $sdk == standalone ] || [ $unity_version != auto ]; then
            can_fail=$should_test
          fi
          echo can_fail=$can_fail >> $GITHUB_OUTPUT
          
          check_name="Unsupported platform result ($unity_version, $sdk)"
          echo check_name=$check_name >> $GITHUB_OUTPUT

      - uses: LouisBrunner/checks-action@v1.6.2
        id: create_check
        name: Create check
        if: ${{ github.event_name == 'pull_request_target' && steps.setup.outputs.can_fail == 'true' }}
        with:
          token: ${{ github.token }}
          name: ${{ steps.setup.outputs.check_name }}
          status: in_progress
          

      - uses: LouisBrunner/checks-action@v1.6.2
        id: create_skipped_check
        name: Create check (skipped)
        if: ${{ github.event_name == 'pull_request_target' && steps.setup.outputs.should_test == 'false' }}
        with:
          token: ${{ github.token }}
          name: ${{ steps.setup.outputs.check_name }}
          conclusion: skipped
          output: '{ "summary": "Skipped" }'

      - uses: actions/checkout@v3
        if: ${{ steps.setup.outputs.should_test == 'true' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: prepare-project
        if: ${{ steps.setup.outputs.should_test == 'true' }}
        name: Prepare project
        run: |
          mkdir .github/ProjectRoot/Packages/nadena.dev.ndmf -p
          mv [^P]* .github/ProjectRoot/Packages/nadena.dev.ndmf
          mv .github/ProjectRoot/* .
          mv 'Packages/nadena.dev.ndmf/UnitTests~' 'Packages/nadena.dev.ndmf/UnitTests'
          for i in packages-lock manifest; do
            if [ -e "$i-${{ matrix.unity_version }}.json" ]; then
              mv "$i-${{ matrix.unity_version }}.json" Packages/$i.json -v
            fi
          done
      
      - id: symlink-deps
        if: ${{ steps.setup.outputs.should_test == 'true' && matrix.sdk != 'vrcsdk' }}
        name: Symlink dependencies
        run: |
          cd Packages/nadena.dev.ndmf
          ln -s 'Dependencies~' Dependencies

      - uses: anatawa12/sh-actions/resolve-vpm-packages@master
        name: Resolve VPM packages
        if: ${{ matrix.sdk == 'vrcsdk' && steps.setup.outputs.should_test == 'true' }}

      - if: ${{ steps.setup.outputs.should_test == 'true' }}
        name: "Debug: List project contents"
        run: |
          ls -lR
          ls -lR Packages/nadena*

      - uses: actions/cache@v3
        if: ${{ steps.setup.outputs.should_test == 'true' }}
        with:
          path: Library
          key: Library-${{ matrix.unity_version }}-${{ matrix.sdk }}
          restore-keys: Library-

      - uses: game-ci/unity-test-runner@v3
        id: gameci
        continue-on-error: ${{ steps.setup.outputs.can_fail == 'true' }}
        if: ${{ steps.setup.outputs.should_test == 'true' }}
        env:
          # meh, just a personal license...
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          testMode: EditMode
          unityVersion: ${{ matrix.unity_version }}
          githubToken: ${{ github.token }}
          coverageOptions: generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+nadena.dev.*
          customParameters: -nographics -assemblyNames nadena.dev.ndmf.UnitTests

      # For our main "supported" platforms, we report the conclusion of gameci as-is. However, for standalone, we report
      # neutral if it failed.
      - id: determine_conclusion
        name: Determine conclusion
        if: ${{ steps.setup.outputs.should_test == 'true' }}
        env:
          unity_version: ${{ matrix.unity_version }}
          sdk_platform: ${{ matrix.sdk }}
          gameci_outcome: ${{ steps.gameci.outcome }}
          can_fail: ${{ steps.setup.outputs.can_fail }}
        run: |
          outcome=$gameci_outcome
          output="{ \"summary\": \"Result: $outcome\" }"
          if [ "$gameci_outcome" == "failure" ] && $can_fail; then
            outcome=neutral
          fi
          echo matrix_outcome=$outcome >> $GITHUB_OUTPUT
          echo matrix_output=$output >> $GITHUB_OUTPUT

      - uses: LouisBrunner/checks-action@v1.6.2
        name: Set check conclusion
        if: ${{ github.event_name == 'pull_request_target' && steps.setup.outputs.can_fail == 'true' }}
        with:
          token: ${{ github.token }}
          check_id: ${{ steps.create_check.outputs.check_id }}
          conclusion: ${{ steps.determine_conclusion.outputs.matrix_outcome }}
          output: ${{ steps.determine_conclusion.outputs.matrix_output }}

      - if: ${{ steps.setup.outputs.should_test == 'true' }}
        name: "Rename results file"
        run: |
          mv ${{ steps.gameci.outputs.artifactsPath }} testresults-${{ matrix.unity_version }}-${{ matrix.sdk }}.xml

      - uses: actions/upload-artifact@v3
        if: ${{ steps.setup.outputs.should_test == 'true' }}
        with:
          name: Test results ${{ matrix.unity_version }} ${{ matrix.sdk }}
          path: testresults-${{ matrix.unity_version }}-${{ matrix.sdk }}.xml

      - uses: actions/upload-artifact@v3
        if: ${{ steps.setup.outputs.should_test == 'true' && matrix.sdk == 'vrcsdk' && matrix.unity_version == 'auto' }}
        with:
          name: Coverage results ${{ matrix.unity_version }} ${{ matrix.sdk }}
          path: ${{ steps.gameci.outputs.coveragePath }}